class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        Dynamic programming
        dp = [[1]*n for _ in range(m)]
        for i in range(1, m):
            for j in range(1, n):
                dp[i][j] = dp[i-1][j]+dp[i][j-1]
        return dp[m-1][n-1]

        # combinomatric or combination conficient
        # return math.comb(m+n-2, n-1)

        # Recursive approach
        # Time limit exceeded
        # if m == 1 or n == 1:
        #     return 1
        # return self.uniquePaths(m-1, n) + self.uniquePaths(m, n-1)
        
