# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def doubleIt(self, head: Optional[ListNode]) -> Optional[ListNode]:
            def reverse(head):
                prev, curr = None, head
                while curr:
                    next_node = curr.next
                    curr.next = prev
                    prev = curr
                    curr = next_node
                return prev

            head = reverse(head)
            curr = head
            carry = 0
            prev = None 
            
            while curr:
                product = curr.val * 2 + carry
                curr.val = product % 10
                carry = product // 10
                prev = curr
                curr = curr.next

            if carry > 0:
                prev.next = ListNode(carry)
            return reverse(head)


        
